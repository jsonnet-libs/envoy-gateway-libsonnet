{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='backendTrafficPolicy', url='', help='"BackendTrafficPolicy allows the user to configure the behavior of the connection\\nbetween the Envoy Proxy listener and the backend service."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of BackendTrafficPolicy', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'gateway.envoyproxy.io/v1alpha1',
    kind: 'BackendTrafficPolicy',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"spec defines the desired state of BackendTrafficPolicy."'),
  spec: {
    '#circuitBreaker':: d.obj(help='"Circuit Breaker settings for the upstream connections and requests.\\nIf not set, circuit breakers will be enabled with the default thresholds"'),
    circuitBreaker: {
      '#perEndpoint':: d.obj(help='"PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster"'),
      perEndpoint: {
        '#withMaxConnections':: d.fn(help='"MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule."', args=[d.arg(name='maxConnections', type=d.T.integer)]),
        withMaxConnections(maxConnections): { spec+: { circuitBreaker+: { perEndpoint+: { maxConnections: maxConnections } } } },
      },
      '#withMaxConnections':: d.fn(help='"The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule."', args=[d.arg(name='maxConnections', type=d.T.integer)]),
      withMaxConnections(maxConnections): { spec+: { circuitBreaker+: { maxConnections: maxConnections } } },
      '#withMaxParallelRequests':: d.fn(help='"The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule."', args=[d.arg(name='maxParallelRequests', type=d.T.integer)]),
      withMaxParallelRequests(maxParallelRequests): { spec+: { circuitBreaker+: { maxParallelRequests: maxParallelRequests } } },
      '#withMaxParallelRetries':: d.fn(help='"The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule."', args=[d.arg(name='maxParallelRetries', type=d.T.integer)]),
      withMaxParallelRetries(maxParallelRetries): { spec+: { circuitBreaker+: { maxParallelRetries: maxParallelRetries } } },
      '#withMaxPendingRequests':: d.fn(help='"The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule."', args=[d.arg(name='maxPendingRequests', type=d.T.integer)]),
      withMaxPendingRequests(maxPendingRequests): { spec+: { circuitBreaker+: { maxPendingRequests: maxPendingRequests } } },
      '#withMaxRequestsPerConnection':: d.fn(help='"The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.\\nDefault: unlimited."', args=[d.arg(name='maxRequestsPerConnection', type=d.T.integer)]),
      withMaxRequestsPerConnection(maxRequestsPerConnection): { spec+: { circuitBreaker+: { maxRequestsPerConnection: maxRequestsPerConnection } } },
    },
    '#compression':: d.obj(help='"The compression config for the http streams."'),
    compression: {
      '#withBrotli':: d.fn(help='"The configuration for Brotli compressor."', args=[d.arg(name='brotli', type=d.T.object)]),
      withBrotli(brotli): { brotli: brotli },
      '#withBrotliMixin':: d.fn(help='"The configuration for Brotli compressor."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='brotli', type=d.T.object)]),
      withBrotliMixin(brotli): { brotli+: brotli },
      '#withGzip':: d.fn(help='"The configuration for GZIP compressor."', args=[d.arg(name='gzip', type=d.T.object)]),
      withGzip(gzip): { gzip: gzip },
      '#withGzipMixin':: d.fn(help='"The configuration for GZIP compressor."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gzip', type=d.T.object)]),
      withGzipMixin(gzip): { gzip+: gzip },
      '#withType':: d.fn(help='"CompressorType defines the compressor type to use for compression."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { type: type },
    },
    '#connection':: d.obj(help='"Connection includes backend connection settings."'),
    connection: {
      '#withBufferLimit':: d.fn(help="\"BufferLimit Soft limit on size of the cluster’s connections read and write buffers.\\nBufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.\\nIf unspecified, an implementation defined default is applied (32768 bytes).\\nFor example, 20Mi, 1Gi, 256Ki etc.\\nNote: that when the suffix is not provided, the value is interpreted as bytes.\"", args=[d.arg(name='bufferLimit', type=d.T.any)]),
      withBufferLimit(bufferLimit): { spec+: { connection+: { bufferLimit: bufferLimit } } },
      '#withSocketBufferLimit':: d.fn(help="\"SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket\\nto backend.\\nSocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.\\nFor example, 20Mi, 1Gi, 256Ki etc.\\nNote that when the suffix is not provided, the value is interpreted as bytes.\"", args=[d.arg(name='socketBufferLimit', type=d.T.any)]),
      withSocketBufferLimit(socketBufferLimit): { spec+: { connection+: { socketBufferLimit: socketBufferLimit } } },
    },
    '#dns':: d.obj(help='"DNS includes dns resolution settings."'),
    dns: {
      '#withDnsRefreshRate':: d.fn(help='"DNSRefreshRate specifies the rate at which DNS records should be refreshed.\\nDefaults to 30 seconds."', args=[d.arg(name='dnsRefreshRate', type=d.T.string)]),
      withDnsRefreshRate(dnsRefreshRate): { spec+: { dns+: { dnsRefreshRate: dnsRefreshRate } } },
      '#withLookupFamily':: d.fn(help='"LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).\\nIf set, this configuration overrides other defaults."', args=[d.arg(name='lookupFamily', type=d.T.string)]),
      withLookupFamily(lookupFamily): { spec+: { dns+: { lookupFamily: lookupFamily } } },
      '#withRespectDnsTtl':: d.fn(help='"RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.\\nIf the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.\\nDefaults to true."', args=[d.arg(name='respectDnsTtl', type=d.T.boolean)]),
      withRespectDnsTtl(respectDnsTtl): { spec+: { dns+: { respectDnsTtl: respectDnsTtl } } },
    },
    '#faultInjection':: d.obj(help='"FaultInjection defines the fault injection policy to be applied. This configuration can be used to\\ninject delays and abort requests to mimic failure scenarios such as service failures and overloads"'),
    faultInjection: {
      '#abort':: d.obj(help='"If specified, the request will be aborted if it meets the configuration criteria."'),
      abort: {
        '#withGrpcStatus':: d.fn(help='"GrpcStatus specifies the GRPC status code to be returned"', args=[d.arg(name='grpcStatus', type=d.T.integer)]),
        withGrpcStatus(grpcStatus): { spec+: { faultInjection+: { abort+: { grpcStatus: grpcStatus } } } },
        '#withHttpStatus':: d.fn(help='"StatusCode specifies the HTTP status code to be returned"', args=[d.arg(name='httpStatus', type=d.T.integer)]),
        withHttpStatus(httpStatus): { spec+: { faultInjection+: { abort+: { httpStatus: httpStatus } } } },
        '#withPercentage':: d.fn(help='"Percentage specifies the percentage of requests to be aborted. Default 100%, if set 0, no requests will be aborted. Accuracy to 0.0001%."', args=[d.arg(name='percentage', type=d.T.number)]),
        withPercentage(percentage): { spec+: { faultInjection+: { abort+: { percentage: percentage } } } },
      },
      '#delay':: d.obj(help='"If specified, a delay will be injected into the request."'),
      delay: {
        '#withFixedDelay':: d.fn(help='"FixedDelay specifies the fixed delay duration"', args=[d.arg(name='fixedDelay', type=d.T.string)]),
        withFixedDelay(fixedDelay): { spec+: { faultInjection+: { delay+: { fixedDelay: fixedDelay } } } },
        '#withPercentage':: d.fn(help='"Percentage specifies the percentage of requests to be delayed. Default 100%, if set 0, no requests will be delayed. Accuracy to 0.0001%."', args=[d.arg(name='percentage', type=d.T.number)]),
        withPercentage(percentage): { spec+: { faultInjection+: { delay+: { percentage: percentage } } } },
      },
    },
    '#healthCheck':: d.obj(help='"HealthCheck allows gateway to perform active health checking on backends."'),
    healthCheck: {
      '#active':: d.obj(help='"Active health check configuration"'),
      active: {
        '#grpc':: d.obj(help="\"GRPC defines the configuration of the GRPC health checker.\\nIt's optional, and can only be used if the specified type is GRPC.\""),
        grpc: {
          '#withService':: d.fn(help='"Service to send in the health check request.\\nIf this is not specified, then the health check request applies to the entire\\nserver and not to a specific service."', args=[d.arg(name='service', type=d.T.string)]),
          withService(service): { spec+: { healthCheck+: { active+: { grpc+: { service: service } } } } },
        },
        '#http':: d.obj(help="\"HTTP defines the configuration of http health checker.\\nIt's required while the health checker type is HTTP.\""),
        http: {
          '#expectedResponse':: d.obj(help='"ExpectedResponse defines a list of HTTP expected responses to match."'),
          expectedResponse: {
            '#withBinary':: d.fn(help='"Binary payload base64 encoded."', args=[d.arg(name='binary', type=d.T.string)]),
            withBinary(binary): { spec+: { healthCheck+: { active+: { http+: { expectedResponse+: { binary: binary } } } } } },
            '#withText':: d.fn(help='"Text payload in plain text."', args=[d.arg(name='text', type=d.T.string)]),
            withText(text): { spec+: { healthCheck+: { active+: { http+: { expectedResponse+: { text: text } } } } } },
            '#withType':: d.fn(help='"Type defines the type of the payload."', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { healthCheck+: { active+: { http+: { expectedResponse+: { type: type } } } } } },
          },
          '#withExpectedStatuses':: d.fn(help='"ExpectedStatuses defines a list of HTTP response statuses considered healthy.\\nDefaults to 200 only"', args=[d.arg(name='expectedStatuses', type=d.T.array)]),
          withExpectedStatuses(expectedStatuses): { spec+: { healthCheck+: { active+: { http+: { expectedStatuses: if std.isArray(v=expectedStatuses) then expectedStatuses else [expectedStatuses] } } } } },
          '#withExpectedStatusesMixin':: d.fn(help='"ExpectedStatuses defines a list of HTTP response statuses considered healthy.\\nDefaults to 200 only"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='expectedStatuses', type=d.T.array)]),
          withExpectedStatusesMixin(expectedStatuses): { spec+: { healthCheck+: { active+: { http+: { expectedStatuses+: if std.isArray(v=expectedStatuses) then expectedStatuses else [expectedStatuses] } } } } },
          '#withMethod':: d.fn(help='"Method defines the HTTP method used for health checking.\\nDefaults to GET"', args=[d.arg(name='method', type=d.T.string)]),
          withMethod(method): { spec+: { healthCheck+: { active+: { http+: { method: method } } } } },
          '#withPath':: d.fn(help='"Path defines the HTTP path that will be requested during health checking."', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { spec+: { healthCheck+: { active+: { http+: { path: path } } } } },
        },
        '#tcp':: d.obj(help="\"TCP defines the configuration of tcp health checker.\\nIt's required while the health checker type is TCP.\""),
        tcp: {
          '#receive':: d.obj(help='"Receive defines the expected response payload."'),
          receive: {
            '#withBinary':: d.fn(help='"Binary payload base64 encoded."', args=[d.arg(name='binary', type=d.T.string)]),
            withBinary(binary): { spec+: { healthCheck+: { active+: { tcp+: { receive+: { binary: binary } } } } } },
            '#withText':: d.fn(help='"Text payload in plain text."', args=[d.arg(name='text', type=d.T.string)]),
            withText(text): { spec+: { healthCheck+: { active+: { tcp+: { receive+: { text: text } } } } } },
            '#withType':: d.fn(help='"Type defines the type of the payload."', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { healthCheck+: { active+: { tcp+: { receive+: { type: type } } } } } },
          },
          '#send':: d.obj(help='"Send defines the request payload."'),
          send: {
            '#withBinary':: d.fn(help='"Binary payload base64 encoded."', args=[d.arg(name='binary', type=d.T.string)]),
            withBinary(binary): { spec+: { healthCheck+: { active+: { tcp+: { send+: { binary: binary } } } } } },
            '#withText':: d.fn(help='"Text payload in plain text."', args=[d.arg(name='text', type=d.T.string)]),
            withText(text): { spec+: { healthCheck+: { active+: { tcp+: { send+: { text: text } } } } } },
            '#withType':: d.fn(help='"Type defines the type of the payload."', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { healthCheck+: { active+: { tcp+: { send+: { type: type } } } } } },
          },
        },
        '#withHealthyThreshold':: d.fn(help='"HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy."', args=[d.arg(name='healthyThreshold', type=d.T.integer)]),
        withHealthyThreshold(healthyThreshold): { spec+: { healthCheck+: { active+: { healthyThreshold: healthyThreshold } } } },
        '#withInterval':: d.fn(help='"Interval defines the time between active health checks."', args=[d.arg(name='interval', type=d.T.string)]),
        withInterval(interval): { spec+: { healthCheck+: { active+: { interval: interval } } } },
        '#withTimeout':: d.fn(help='"Timeout defines the time to wait for a health check response."', args=[d.arg(name='timeout', type=d.T.string)]),
        withTimeout(timeout): { spec+: { healthCheck+: { active+: { timeout: timeout } } } },
        '#withType':: d.fn(help='"Type defines the type of health checker."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { healthCheck+: { active+: { type: type } } } },
        '#withUnhealthyThreshold':: d.fn(help='"UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy."', args=[d.arg(name='unhealthyThreshold', type=d.T.integer)]),
        withUnhealthyThreshold(unhealthyThreshold): { spec+: { healthCheck+: { active+: { unhealthyThreshold: unhealthyThreshold } } } },
      },
      '#passive':: d.obj(help='"Passive passive check configuration"'),
      passive: {
        '#withBaseEjectionTime':: d.fn(help='"BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures."', args=[d.arg(name='baseEjectionTime', type=d.T.string)]),
        withBaseEjectionTime(baseEjectionTime): { spec+: { healthCheck+: { passive+: { baseEjectionTime: baseEjectionTime } } } },
        '#withConsecutive5XxErrors':: d.fn(help='"Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection."', args=[d.arg(name='consecutive5XxErrors', type=d.T.integer)]),
        withConsecutive5XxErrors(consecutive5XxErrors): { spec+: { healthCheck+: { passive+: { consecutive5XxErrors: consecutive5XxErrors } } } },
        '#withConsecutiveGatewayErrors':: d.fn(help='"ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection."', args=[d.arg(name='consecutiveGatewayErrors', type=d.T.integer)]),
        withConsecutiveGatewayErrors(consecutiveGatewayErrors): { spec+: { healthCheck+: { passive+: { consecutiveGatewayErrors: consecutiveGatewayErrors } } } },
        '#withConsecutiveLocalOriginFailures':: d.fn(help='"ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.\\nParameter takes effect only when split_external_local_origin_errors is set to true."', args=[d.arg(name='consecutiveLocalOriginFailures', type=d.T.integer)]),
        withConsecutiveLocalOriginFailures(consecutiveLocalOriginFailures): { spec+: { healthCheck+: { passive+: { consecutiveLocalOriginFailures: consecutiveLocalOriginFailures } } } },
        '#withInterval':: d.fn(help='"Interval defines the time between passive health checks."', args=[d.arg(name='interval', type=d.T.string)]),
        withInterval(interval): { spec+: { healthCheck+: { passive+: { interval: interval } } } },
        '#withMaxEjectionPercent':: d.fn(help='"MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected."', args=[d.arg(name='maxEjectionPercent', type=d.T.integer)]),
        withMaxEjectionPercent(maxEjectionPercent): { spec+: { healthCheck+: { passive+: { maxEjectionPercent: maxEjectionPercent } } } },
        '#withSplitExternalLocalOriginErrors':: d.fn(help='"SplitExternalLocalOriginErrors enables splitting of errors between external and local origin."', args=[d.arg(name='splitExternalLocalOriginErrors', type=d.T.boolean)]),
        withSplitExternalLocalOriginErrors(splitExternalLocalOriginErrors): { spec+: { healthCheck+: { passive+: { splitExternalLocalOriginErrors: splitExternalLocalOriginErrors } } } },
      },
      '#withPanicThreshold':: d.fn(help="\"When number of unhealthy endpoints for a backend reaches this threshold\\nEnvoy will disregard health status and balance across all endpoints.\\nIt's designed to prevent a situation in which host failures cascade throughout the cluster\\nas load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.\"", args=[d.arg(name='panicThreshold', type=d.T.integer)]),
      withPanicThreshold(panicThreshold): { spec+: { healthCheck+: { panicThreshold: panicThreshold } } },
    },
    '#http2':: d.obj(help='"HTTP2 provides HTTP/2 configuration for backend connections."'),
    http2: {
      '#withInitialConnectionWindowSize':: d.fn(help='"InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.\\nIf not set, the default value is 1 MiB."', args=[d.arg(name='initialConnectionWindowSize', type=d.T.any)]),
      withInitialConnectionWindowSize(initialConnectionWindowSize): { spec+: { http2+: { initialConnectionWindowSize: initialConnectionWindowSize } } },
      '#withInitialStreamWindowSize':: d.fn(help='"InitialStreamWindowSize sets the initial window size for HTTP/2 streams.\\nIf not set, the default value is 64 KiB(64*1024)."', args=[d.arg(name='initialStreamWindowSize', type=d.T.any)]),
      withInitialStreamWindowSize(initialStreamWindowSize): { spec+: { http2+: { initialStreamWindowSize: initialStreamWindowSize } } },
      '#withMaxConcurrentStreams':: d.fn(help='"MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.\\nIf not set, the default value is 100."', args=[d.arg(name='maxConcurrentStreams', type=d.T.integer)]),
      withMaxConcurrentStreams(maxConcurrentStreams): { spec+: { http2+: { maxConcurrentStreams: maxConcurrentStreams } } },
      '#withOnInvalidMessage':: d.fn(help="\"OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error\\nIt's recommended for L2 Envoy deployments to set this value to TerminateStream.\\nhttps://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two\\nDefault: TerminateConnection\"", args=[d.arg(name='onInvalidMessage', type=d.T.string)]),
      withOnInvalidMessage(onInvalidMessage): { spec+: { http2+: { onInvalidMessage: onInvalidMessage } } },
    },
    '#httpUpgrade':: d.obj(help='"HTTPUpgrade defines the configuration for HTTP protocol upgrades.\\nIf not specified, the default upgrade configuration(websocket) will be used."'),
    httpUpgrade: {
      '#withType':: d.fn(help='"Type is the case-insensitive type of protocol upgrade.\\ne.g. `websocket`, `CONNECT`, `spdy/3.1` etc."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { type: type },
    },
    '#loadBalancer':: d.obj(help='"LoadBalancer policy to apply when routing traffic from the gateway to\\nthe backend endpoints. Defaults to `LeastRequest`."'),
    loadBalancer: {
      '#consistentHash':: d.obj(help='"ConsistentHash defines the configuration when the load balancer type is\\nset to ConsistentHash"'),
      consistentHash: {
        '#cookie':: d.obj(help='"Cookie configures the cookie hash policy when the consistent hash type is set to Cookie."'),
        cookie: {
          '#withAttributes':: d.fn(help='"Additional Attributes to set for the generated cookie."', args=[d.arg(name='attributes', type=d.T.object)]),
          withAttributes(attributes): { spec+: { loadBalancer+: { consistentHash+: { cookie+: { attributes: attributes } } } } },
          '#withAttributesMixin':: d.fn(help='"Additional Attributes to set for the generated cookie."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='attributes', type=d.T.object)]),
          withAttributesMixin(attributes): { spec+: { loadBalancer+: { consistentHash+: { cookie+: { attributes+: attributes } } } } },
          '#withName':: d.fn(help='"Name of the cookie to hash.\\nIf this cookie does not exist in the request, Envoy will generate a cookie and set\\nthe TTL on the response back to the client based on Layer 4\\nattributes of the backend endpoint, to ensure that these future requests\\ngo to the same backend endpoint. Make sure to set the TTL field for this case."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { loadBalancer+: { consistentHash+: { cookie+: { name: name } } } } },
          '#withTtl':: d.fn(help='"TTL of the generated cookie if the cookie is not present. This value sets the\\nMax-Age attribute value."', args=[d.arg(name='ttl', type=d.T.string)]),
          withTtl(ttl): { spec+: { loadBalancer+: { consistentHash+: { cookie+: { ttl: ttl } } } } },
        },
        '#header':: d.obj(help='"Header configures the header hash policy when the consistent hash type is set to Header."'),
        header: {
          '#withName':: d.fn(help='"Name of the header to hash."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { loadBalancer+: { consistentHash+: { header+: { name: name } } } } },
        },
        '#withTableSize':: d.fn(help='"The table size for consistent hashing, must be prime number limited to 5000011."', args=[d.arg(name='tableSize', type=d.T.integer)]),
        withTableSize(tableSize): { spec+: { loadBalancer+: { consistentHash+: { tableSize: tableSize } } } },
        '#withType':: d.fn(help='"ConsistentHashType defines the type of input to hash on. Valid Type values are\\n\\"SourceIP\\",\\n\\"Header\\",\\n\\"Cookie\\"."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { loadBalancer+: { consistentHash+: { type: type } } } },
      },
      '#slowStart':: d.obj(help='"SlowStart defines the configuration related to the slow start load balancer policy.\\nIf set, during slow start window, traffic sent to the newly added hosts will gradually increase.\\nCurrently this is only supported for RoundRobin and LeastRequest load balancers"'),
      slowStart: {
        '#withWindow':: d.fn(help='"Window defines the duration of the warm up period for newly added host.\\nDuring slow start window, traffic sent to the newly added hosts will gradually increase.\\nCurrently only supports linear growth of traffic. For additional details,\\nsee https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig"', args=[d.arg(name='window', type=d.T.string)]),
        withWindow(window): { spec+: { loadBalancer+: { slowStart+: { window: window } } } },
      },
      '#withType':: d.fn(help='"Type decides the type of Load Balancer policy.\\nValid LoadBalancerType values are\\n\\"ConsistentHash\\",\\n\\"LeastRequest\\",\\n\\"Random\\",\\n\\"RoundRobin\\"."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { loadBalancer+: { type: type } } },
    },
    '#proxyProtocol':: d.obj(help='"ProxyProtocol enables the Proxy Protocol when communicating with the backend."'),
    proxyProtocol: {
      '#withVersion':: d.fn(help='"Version of ProxyProtol\\nValid ProxyProtocolVersion values are\\n\\"V1\\"\\n\\"V2\\', args=[d.arg(name='version', type=d.T.string)]),
      withVersion(version): { spec+: { proxyProtocol+: { version: version } } },
    },
    '#rateLimit':: d.obj(help='"RateLimit allows the user to limit the number of incoming requests\\nto a predefined value based on attributes within the traffic flow."'),
    rateLimit: {
      '#global':: d.obj(help='"Global defines global rate limit configuration."'),
      global: {
        '#rules':: d.obj(help='"Rules are a list of RateLimit selectors and limits. Each rule and its\\nassociated limit is applied in a mutually exclusive way. If a request\\nmatches multiple rules, each of their associated limits get applied, so a\\nsingle request might increase the rate limit counters for multiple rules\\nif selected. The rate limit service will return a logical OR of the individual\\nrate limit decisions of all matching rules. For example, if a request\\nmatches two rules, one rate limited and one not, the final decision will be\\nto rate limit the request."'),
        rules: {
          '#clientSelectors':: d.obj(help='"ClientSelectors holds the list of select conditions to select\\nspecific clients using attributes from the traffic flow.\\nAll individual select conditions must hold True for this rule\\nand its limit to be applied.\\n\\nIf no client selectors are specified, the rule applies to all traffic of\\nthe targeted Route.\\n\\nIf the policy targets a Gateway, the rule applies to each Route of the Gateway.\\nPlease note that each Route has its own rate limit counters. For example,\\nif a Gateway has two Routes, and the policy has a rule with limit 10rps,\\neach Route will have its own 10rps limit."'),
          clientSelectors: {
            '#headers':: d.obj(help='"Headers is a list of request headers to match. Multiple header values are ANDed together,\\nmeaning, a request MUST match all the specified headers.\\nAt least one of headers or sourceCIDR condition must be specified."'),
            headers: {
              '#withInvert':: d.fn(help='"Invert specifies whether the value match result will be inverted.\\nDo not set this field when Type=\\"Distinct\\", implying matching on any/all unique\\nvalues within the header."', args=[d.arg(name='invert', type=d.T.boolean)]),
              withInvert(invert): { invert: invert },
              '#withName':: d.fn(help='"Name of the HTTP header.\\nThe header name is case-insensitive unless PreserveHeaderCase is set to true.\\nFor example, \\"Foo\\" and \\"foo\\" are considered the same header."', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withType':: d.fn(help='"Type specifies how to match against the value of the header."', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { type: type },
              '#withValue':: d.fn(help='"Value within the HTTP header.\\nDo not set this field when Type=\\"Distinct\\", implying matching on any/all unique\\nvalues within the header."', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#sourceCIDR':: d.obj(help='"SourceCIDR is the client IP Address range to match on.\\nAt least one of headers or sourceCIDR condition must be specified."'),
            sourceCIDR: {
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { sourceCIDR+: { type: type } },
              '#withValue':: d.fn(help='"Value is the IP CIDR that represents the range of Source IP Addresses of the client.\\nThese could also be the intermediate addresses through which the request has flown through and is part of the  `X-Forwarded-For` header.\\nFor example, `192.168.0.1/32`, `192.168.0.0/24`, `001:db8::/64`."', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { sourceCIDR+: { value: value } },
            },
            '#withHeaders':: d.fn(help='"Headers is a list of request headers to match. Multiple header values are ANDed together,\\nmeaning, a request MUST match all the specified headers.\\nAt least one of headers or sourceCIDR condition must be specified."', args=[d.arg(name='headers', type=d.T.array)]),
            withHeaders(headers): { headers: if std.isArray(v=headers) then headers else [headers] },
            '#withHeadersMixin':: d.fn(help='"Headers is a list of request headers to match. Multiple header values are ANDed together,\\nmeaning, a request MUST match all the specified headers.\\nAt least one of headers or sourceCIDR condition must be specified."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.array)]),
            withHeadersMixin(headers): { headers+: if std.isArray(v=headers) then headers else [headers] },
          },
          '#cost':: d.obj(help='"Cost specifies the cost of requests and responses for the rule.\\n\\nThis is optional and if not specified, the default behavior is to reduce the rate limit counters by 1 on\\nthe request path and do not reduce the rate limit counters on the response path."'),
          cost: {
            '#request':: d.obj(help="\"Request specifies the number to reduce the rate limit counters\\non the request path. If this is not specified, the default behavior\\nis to reduce the rate limit counters by 1.\\n\\nWhen Envoy receives a request that matches the rule, it tries to reduce the\\nrate limit counters by the specified number. If the counter doesn't have\\nenough capacity, the request is rate limited.\""),
            request: {
              '#metadata':: d.obj(help='"Metadata specifies the per-request metadata to retrieve the usage number from."'),
              metadata: {
                '#withKey':: d.fn(help='"Key is the key to retrieve the usage number from the filter metadata."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { cost+: { request+: { metadata+: { key: key } } } },
                '#withNamespace':: d.fn(help='"Namespace is the namespace of the dynamic metadata."', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { cost+: { request+: { metadata+: { namespace: namespace } } } },
              },
              '#withFrom':: d.fn(help='"From specifies where to get the rate limit cost. Currently, only \\"Number\\" and \\"Metadata\\" are supported."', args=[d.arg(name='from', type=d.T.string)]),
              withFrom(from): { cost+: { request+: { from: from } } },
              '#withNumber':: d.fn(help='"Number specifies the fixed usage number to reduce the rate limit counters.\\nUsing zero can be used to only check the rate limit counters without reducing them."', args=[d.arg(name='number', type=d.T.integer)]),
              withNumber(number): { cost+: { request+: { number: number } } },
            },
            '#response':: d.obj(help="\"Response specifies the number to reduce the rate limit counters\\nafter the response is sent back to the client or the request stream is closed.\\n\\nThe cost is used to reduce the rate limit counters for the matching requests.\\nSince the reduction happens after the request stream is complete, the rate limit\\nwon't be enforced for the current request, but for the subsequent matching requests.\\n\\nThis is optional and if not specified, the rate limit counters are not reduced\\non the response path.\\n\\nCurrently, this is only supported for HTTP Global Rate Limits.\""),
            response: {
              '#metadata':: d.obj(help='"Metadata specifies the per-request metadata to retrieve the usage number from."'),
              metadata: {
                '#withKey':: d.fn(help='"Key is the key to retrieve the usage number from the filter metadata."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { cost+: { response+: { metadata+: { key: key } } } },
                '#withNamespace':: d.fn(help='"Namespace is the namespace of the dynamic metadata."', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { cost+: { response+: { metadata+: { namespace: namespace } } } },
              },
              '#withFrom':: d.fn(help='"From specifies where to get the rate limit cost. Currently, only \\"Number\\" and \\"Metadata\\" are supported."', args=[d.arg(name='from', type=d.T.string)]),
              withFrom(from): { cost+: { response+: { from: from } } },
              '#withNumber':: d.fn(help='"Number specifies the fixed usage number to reduce the rate limit counters.\\nUsing zero can be used to only check the rate limit counters without reducing them."', args=[d.arg(name='number', type=d.T.integer)]),
              withNumber(number): { cost+: { response+: { number: number } } },
            },
          },
          '#limit':: d.obj(help='"Limit holds the rate limit values.\\nThis limit is applied for traffic flows when the selectors\\ncompute to True, causing the request to be counted towards the limit.\\nThe limit is enforced and the request is ratelimited, i.e. a response with\\n429 HTTP status code is sent back to the client when\\nthe selected requests have reached the limit."'),
          limit: {
            '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.integer)]),
            withRequests(requests): { limit+: { requests: requests } },
            '#withUnit':: d.fn(help='"RateLimitUnit specifies the intervals for setting rate limits.\\nValid RateLimitUnit values are \\"Second\\", \\"Minute\\", \\"Hour\\", and \\"Day\\"."', args=[d.arg(name='unit', type=d.T.string)]),
            withUnit(unit): { limit+: { unit: unit } },
          },
          '#withClientSelectors':: d.fn(help='"ClientSelectors holds the list of select conditions to select\\nspecific clients using attributes from the traffic flow.\\nAll individual select conditions must hold True for this rule\\nand its limit to be applied.\\n\\nIf no client selectors are specified, the rule applies to all traffic of\\nthe targeted Route.\\n\\nIf the policy targets a Gateway, the rule applies to each Route of the Gateway.\\nPlease note that each Route has its own rate limit counters. For example,\\nif a Gateway has two Routes, and the policy has a rule with limit 10rps,\\neach Route will have its own 10rps limit."', args=[d.arg(name='clientSelectors', type=d.T.array)]),
          withClientSelectors(clientSelectors): { clientSelectors: if std.isArray(v=clientSelectors) then clientSelectors else [clientSelectors] },
          '#withClientSelectorsMixin':: d.fn(help='"ClientSelectors holds the list of select conditions to select\\nspecific clients using attributes from the traffic flow.\\nAll individual select conditions must hold True for this rule\\nand its limit to be applied.\\n\\nIf no client selectors are specified, the rule applies to all traffic of\\nthe targeted Route.\\n\\nIf the policy targets a Gateway, the rule applies to each Route of the Gateway.\\nPlease note that each Route has its own rate limit counters. For example,\\nif a Gateway has two Routes, and the policy has a rule with limit 10rps,\\neach Route will have its own 10rps limit."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='clientSelectors', type=d.T.array)]),
          withClientSelectorsMixin(clientSelectors): { clientSelectors+: if std.isArray(v=clientSelectors) then clientSelectors else [clientSelectors] },
          '#withShared':: d.fn(help='"Shared determines whether this rate limit rule applies across all the policy targets.\\nIf set to true, the rule is treated as a common bucket and is shared across all policy targets (xRoutes).\\nDefault: false."', args=[d.arg(name='shared', type=d.T.boolean)]),
          withShared(shared): { shared: shared },
        },
        '#withRules':: d.fn(help='"Rules are a list of RateLimit selectors and limits. Each rule and its\\nassociated limit is applied in a mutually exclusive way. If a request\\nmatches multiple rules, each of their associated limits get applied, so a\\nsingle request might increase the rate limit counters for multiple rules\\nif selected. The rate limit service will return a logical OR of the individual\\nrate limit decisions of all matching rules. For example, if a request\\nmatches two rules, one rate limited and one not, the final decision will be\\nto rate limit the request."', args=[d.arg(name='rules', type=d.T.array)]),
        withRules(rules): { spec+: { rateLimit+: { global+: { rules: if std.isArray(v=rules) then rules else [rules] } } } },
        '#withRulesMixin':: d.fn(help='"Rules are a list of RateLimit selectors and limits. Each rule and its\\nassociated limit is applied in a mutually exclusive way. If a request\\nmatches multiple rules, each of their associated limits get applied, so a\\nsingle request might increase the rate limit counters for multiple rules\\nif selected. The rate limit service will return a logical OR of the individual\\nrate limit decisions of all matching rules. For example, if a request\\nmatches two rules, one rate limited and one not, the final decision will be\\nto rate limit the request."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rules', type=d.T.array)]),
        withRulesMixin(rules): { spec+: { rateLimit+: { global+: { rules+: if std.isArray(v=rules) then rules else [rules] } } } },
      },
      '#local':: d.obj(help='"Local defines local rate limit configuration."'),
      'local': {
        '#rules':: d.obj(help='"Rules are a list of RateLimit selectors and limits. If a request matches\\nmultiple rules, the strictest limit is applied. For example, if a request\\nmatches two rules, one with 10rps and one with 20rps, the final limit will\\nbe based on the rule with 10rps."'),
        rules: {
          '#clientSelectors':: d.obj(help='"ClientSelectors holds the list of select conditions to select\\nspecific clients using attributes from the traffic flow.\\nAll individual select conditions must hold True for this rule\\nand its limit to be applied.\\n\\nIf no client selectors are specified, the rule applies to all traffic of\\nthe targeted Route.\\n\\nIf the policy targets a Gateway, the rule applies to each Route of the Gateway.\\nPlease note that each Route has its own rate limit counters. For example,\\nif a Gateway has two Routes, and the policy has a rule with limit 10rps,\\neach Route will have its own 10rps limit."'),
          clientSelectors: {
            '#headers':: d.obj(help='"Headers is a list of request headers to match. Multiple header values are ANDed together,\\nmeaning, a request MUST match all the specified headers.\\nAt least one of headers or sourceCIDR condition must be specified."'),
            headers: {
              '#withInvert':: d.fn(help='"Invert specifies whether the value match result will be inverted.\\nDo not set this field when Type=\\"Distinct\\", implying matching on any/all unique\\nvalues within the header."', args=[d.arg(name='invert', type=d.T.boolean)]),
              withInvert(invert): { invert: invert },
              '#withName':: d.fn(help='"Name of the HTTP header.\\nThe header name is case-insensitive unless PreserveHeaderCase is set to true.\\nFor example, \\"Foo\\" and \\"foo\\" are considered the same header."', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withType':: d.fn(help='"Type specifies how to match against the value of the header."', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { type: type },
              '#withValue':: d.fn(help='"Value within the HTTP header.\\nDo not set this field when Type=\\"Distinct\\", implying matching on any/all unique\\nvalues within the header."', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#sourceCIDR':: d.obj(help='"SourceCIDR is the client IP Address range to match on.\\nAt least one of headers or sourceCIDR condition must be specified."'),
            sourceCIDR: {
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { sourceCIDR+: { type: type } },
              '#withValue':: d.fn(help='"Value is the IP CIDR that represents the range of Source IP Addresses of the client.\\nThese could also be the intermediate addresses through which the request has flown through and is part of the  `X-Forwarded-For` header.\\nFor example, `192.168.0.1/32`, `192.168.0.0/24`, `001:db8::/64`."', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { sourceCIDR+: { value: value } },
            },
            '#withHeaders':: d.fn(help='"Headers is a list of request headers to match. Multiple header values are ANDed together,\\nmeaning, a request MUST match all the specified headers.\\nAt least one of headers or sourceCIDR condition must be specified."', args=[d.arg(name='headers', type=d.T.array)]),
            withHeaders(headers): { headers: if std.isArray(v=headers) then headers else [headers] },
            '#withHeadersMixin':: d.fn(help='"Headers is a list of request headers to match. Multiple header values are ANDed together,\\nmeaning, a request MUST match all the specified headers.\\nAt least one of headers or sourceCIDR condition must be specified."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.array)]),
            withHeadersMixin(headers): { headers+: if std.isArray(v=headers) then headers else [headers] },
          },
          '#cost':: d.obj(help='"Cost specifies the cost of requests and responses for the rule.\\n\\nThis is optional and if not specified, the default behavior is to reduce the rate limit counters by 1 on\\nthe request path and do not reduce the rate limit counters on the response path."'),
          cost: {
            '#request':: d.obj(help="\"Request specifies the number to reduce the rate limit counters\\non the request path. If this is not specified, the default behavior\\nis to reduce the rate limit counters by 1.\\n\\nWhen Envoy receives a request that matches the rule, it tries to reduce the\\nrate limit counters by the specified number. If the counter doesn't have\\nenough capacity, the request is rate limited.\""),
            request: {
              '#metadata':: d.obj(help='"Metadata specifies the per-request metadata to retrieve the usage number from."'),
              metadata: {
                '#withKey':: d.fn(help='"Key is the key to retrieve the usage number from the filter metadata."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { cost+: { request+: { metadata+: { key: key } } } },
                '#withNamespace':: d.fn(help='"Namespace is the namespace of the dynamic metadata."', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { cost+: { request+: { metadata+: { namespace: namespace } } } },
              },
              '#withFrom':: d.fn(help='"From specifies where to get the rate limit cost. Currently, only \\"Number\\" and \\"Metadata\\" are supported."', args=[d.arg(name='from', type=d.T.string)]),
              withFrom(from): { cost+: { request+: { from: from } } },
              '#withNumber':: d.fn(help='"Number specifies the fixed usage number to reduce the rate limit counters.\\nUsing zero can be used to only check the rate limit counters without reducing them."', args=[d.arg(name='number', type=d.T.integer)]),
              withNumber(number): { cost+: { request+: { number: number } } },
            },
            '#response':: d.obj(help="\"Response specifies the number to reduce the rate limit counters\\nafter the response is sent back to the client or the request stream is closed.\\n\\nThe cost is used to reduce the rate limit counters for the matching requests.\\nSince the reduction happens after the request stream is complete, the rate limit\\nwon't be enforced for the current request, but for the subsequent matching requests.\\n\\nThis is optional and if not specified, the rate limit counters are not reduced\\non the response path.\\n\\nCurrently, this is only supported for HTTP Global Rate Limits.\""),
            response: {
              '#metadata':: d.obj(help='"Metadata specifies the per-request metadata to retrieve the usage number from."'),
              metadata: {
                '#withKey':: d.fn(help='"Key is the key to retrieve the usage number from the filter metadata."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { cost+: { response+: { metadata+: { key: key } } } },
                '#withNamespace':: d.fn(help='"Namespace is the namespace of the dynamic metadata."', args=[d.arg(name='namespace', type=d.T.string)]),
                withNamespace(namespace): { cost+: { response+: { metadata+: { namespace: namespace } } } },
              },
              '#withFrom':: d.fn(help='"From specifies where to get the rate limit cost. Currently, only \\"Number\\" and \\"Metadata\\" are supported."', args=[d.arg(name='from', type=d.T.string)]),
              withFrom(from): { cost+: { response+: { from: from } } },
              '#withNumber':: d.fn(help='"Number specifies the fixed usage number to reduce the rate limit counters.\\nUsing zero can be used to only check the rate limit counters without reducing them."', args=[d.arg(name='number', type=d.T.integer)]),
              withNumber(number): { cost+: { response+: { number: number } } },
            },
          },
          '#limit':: d.obj(help='"Limit holds the rate limit values.\\nThis limit is applied for traffic flows when the selectors\\ncompute to True, causing the request to be counted towards the limit.\\nThe limit is enforced and the request is ratelimited, i.e. a response with\\n429 HTTP status code is sent back to the client when\\nthe selected requests have reached the limit."'),
          limit: {
            '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.integer)]),
            withRequests(requests): { limit+: { requests: requests } },
            '#withUnit':: d.fn(help='"RateLimitUnit specifies the intervals for setting rate limits.\\nValid RateLimitUnit values are \\"Second\\", \\"Minute\\", \\"Hour\\", and \\"Day\\"."', args=[d.arg(name='unit', type=d.T.string)]),
            withUnit(unit): { limit+: { unit: unit } },
          },
          '#withClientSelectors':: d.fn(help='"ClientSelectors holds the list of select conditions to select\\nspecific clients using attributes from the traffic flow.\\nAll individual select conditions must hold True for this rule\\nand its limit to be applied.\\n\\nIf no client selectors are specified, the rule applies to all traffic of\\nthe targeted Route.\\n\\nIf the policy targets a Gateway, the rule applies to each Route of the Gateway.\\nPlease note that each Route has its own rate limit counters. For example,\\nif a Gateway has two Routes, and the policy has a rule with limit 10rps,\\neach Route will have its own 10rps limit."', args=[d.arg(name='clientSelectors', type=d.T.array)]),
          withClientSelectors(clientSelectors): { clientSelectors: if std.isArray(v=clientSelectors) then clientSelectors else [clientSelectors] },
          '#withClientSelectorsMixin':: d.fn(help='"ClientSelectors holds the list of select conditions to select\\nspecific clients using attributes from the traffic flow.\\nAll individual select conditions must hold True for this rule\\nand its limit to be applied.\\n\\nIf no client selectors are specified, the rule applies to all traffic of\\nthe targeted Route.\\n\\nIf the policy targets a Gateway, the rule applies to each Route of the Gateway.\\nPlease note that each Route has its own rate limit counters. For example,\\nif a Gateway has two Routes, and the policy has a rule with limit 10rps,\\neach Route will have its own 10rps limit."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='clientSelectors', type=d.T.array)]),
          withClientSelectorsMixin(clientSelectors): { clientSelectors+: if std.isArray(v=clientSelectors) then clientSelectors else [clientSelectors] },
          '#withShared':: d.fn(help='"Shared determines whether this rate limit rule applies across all the policy targets.\\nIf set to true, the rule is treated as a common bucket and is shared across all policy targets (xRoutes).\\nDefault: false."', args=[d.arg(name='shared', type=d.T.boolean)]),
          withShared(shared): { shared: shared },
        },
        '#withRules':: d.fn(help='"Rules are a list of RateLimit selectors and limits. If a request matches\\nmultiple rules, the strictest limit is applied. For example, if a request\\nmatches two rules, one with 10rps and one with 20rps, the final limit will\\nbe based on the rule with 10rps."', args=[d.arg(name='rules', type=d.T.array)]),
        withRules(rules): { spec+: { rateLimit+: { 'local'+: { rules: if std.isArray(v=rules) then rules else [rules] } } } },
        '#withRulesMixin':: d.fn(help='"Rules are a list of RateLimit selectors and limits. If a request matches\\nmultiple rules, the strictest limit is applied. For example, if a request\\nmatches two rules, one with 10rps and one with 20rps, the final limit will\\nbe based on the rule with 10rps."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rules', type=d.T.array)]),
        withRulesMixin(rules): { spec+: { rateLimit+: { 'local'+: { rules+: if std.isArray(v=rules) then rules else [rules] } } } },
      },
      '#withType':: d.fn(help='"Type decides the scope for the RateLimits.\\nValid RateLimitType values are \\"Global\\" or \\"Local\\"."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { rateLimit+: { type: type } } },
    },
    '#requestBuffer':: d.obj(help='"RequestBuffer allows the gateway to buffer and fully receive each request from a client before continuing to send the request\\nupstream to the backends. This can be helpful to shield your backend servers from slow clients, and also to enforce a maximum size per request\\nas any requests larger than the buffer size will be rejected.\\n\\nThis can have a negative performance impact so should only be enabled when necessary.\\n\\nWhen enabling this option, you should also configure your connection buffer size to account for these request buffers. There will also be an\\nincrease in memory usage for Envoy that should be accounted for in your deployment settings."'),
    requestBuffer: {
      '#withLimit':: d.fn(help='"Limit specifies the maximum allowed size in bytes for each incoming request buffer.\\nIf exceeded, the request will be rejected with HTTP 413 Content Too Large.\\n\\nAccepts values in resource.Quantity format (e.g., \\"10Mi\\", \\"500Ki\\")."', args=[d.arg(name='limit', type=d.T.any)]),
      withLimit(limit): { spec+: { requestBuffer+: { limit: limit } } },
    },
    '#responseOverride':: d.obj(help='"ResponseOverride defines the configuration to override specific responses with a custom one.\\nIf multiple configurations are specified, the first one to match wins."'),
    responseOverride: {
      '#match':: d.obj(help='"Match configuration."'),
      match: {
        '#statusCodes':: d.obj(help='"Status code to match on. The match evaluates to true if any of the matches are successful."'),
        statusCodes: {
          '#range':: d.obj(help='"Range contains the range of status codes."'),
          range: {
            '#withEnd':: d.fn(help='"End of the range, including the end value."', args=[d.arg(name='end', type=d.T.integer)]),
            withEnd(end): { range+: { end: end } },
            '#withStart':: d.fn(help='"Start of the range, including the start value."', args=[d.arg(name='start', type=d.T.integer)]),
            withStart(start): { range+: { start: start } },
          },
          '#withType':: d.fn(help='"Type is the type of value.\\nValid values are Value and Range, default is Value."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
          '#withValue':: d.fn(help='"Value contains the value of the status code."', args=[d.arg(name='value', type=d.T.integer)]),
          withValue(value): { value: value },
        },
        '#withStatusCodes':: d.fn(help='"Status code to match on. The match evaluates to true if any of the matches are successful."', args=[d.arg(name='statusCodes', type=d.T.array)]),
        withStatusCodes(statusCodes): { match+: { statusCodes: if std.isArray(v=statusCodes) then statusCodes else [statusCodes] } },
        '#withStatusCodesMixin':: d.fn(help='"Status code to match on. The match evaluates to true if any of the matches are successful."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='statusCodes', type=d.T.array)]),
        withStatusCodesMixin(statusCodes): { match+: { statusCodes+: if std.isArray(v=statusCodes) then statusCodes else [statusCodes] } },
      },
      '#response':: d.obj(help='"Response configuration."'),
      response: {
        '#body':: d.obj(help='"Body of the Custom Response"'),
        body: {
          '#valueRef':: d.obj(help='"ValueRef contains the contents of the body\\nspecified as a local object reference.\\nOnly a reference to ConfigMap is supported.\\n\\nThe value of key `response.body` in the ConfigMap will be used as the response body.\\nIf the key is not found, the first value in the ConfigMap will be used."'),
          valueRef: {
            '#withGroup':: d.fn(help='"Group is the group of the referent. For example, \\"gateway.networking.k8s.io\\".\\nWhen unspecified or empty string, core API group is inferred."', args=[d.arg(name='group', type=d.T.string)]),
            withGroup(group): { response+: { body+: { valueRef+: { group: group } } } },
            '#withKind':: d.fn(help='"Kind is kind of the referent. For example \\"HTTPRoute\\" or \\"Service\\"."', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { response+: { body+: { valueRef+: { kind: kind } } } },
            '#withName':: d.fn(help='"Name is the name of the referent."', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { response+: { body+: { valueRef+: { name: name } } } },
          },
          '#withInline':: d.fn(help='"Inline contains the value as an inline string."', args=[d.arg(name='inline', type=d.T.string)]),
          withInline(inline): { response+: { body+: { inline: inline } } },
          '#withType':: d.fn(help='"Type is the type of method to use to read the body value.\\nValid values are Inline and ValueRef, default is Inline."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { response+: { body+: { type: type } } },
        },
        '#withContentType':: d.fn(help='"Content Type of the response. This will be set in the Content-Type header."', args=[d.arg(name='contentType', type=d.T.string)]),
        withContentType(contentType): { response+: { contentType: contentType } },
        '#withStatusCode':: d.fn(help='"Status Code of the Custom Response\\nIf unset, does not override the status of response."', args=[d.arg(name='statusCode', type=d.T.integer)]),
        withStatusCode(statusCode): { response+: { statusCode: statusCode } },
      },
    },
    '#retry':: d.obj(help='"Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.\\nIf not set, retry will be disabled."'),
    retry: {
      '#perRetry':: d.obj(help='"PerRetry is the retry policy to be applied per retry attempt."'),
      perRetry: {
        '#backOff':: d.obj(help='"Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential\\nback-off algorithm for retries. For additional details,\\nsee https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries"'),
        backOff: {
          '#withBaseInterval':: d.fn(help='"BaseInterval is the base interval between retries."', args=[d.arg(name='baseInterval', type=d.T.string)]),
          withBaseInterval(baseInterval): { spec+: { retry+: { perRetry+: { backOff+: { baseInterval: baseInterval } } } } },
          '#withMaxInterval':: d.fn(help='"MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.\\nThe default is 10 times the base_interval"', args=[d.arg(name='maxInterval', type=d.T.string)]),
          withMaxInterval(maxInterval): { spec+: { retry+: { perRetry+: { backOff+: { maxInterval: maxInterval } } } } },
        },
        '#withTimeout':: d.fn(help='"Timeout is the timeout per retry attempt."', args=[d.arg(name='timeout', type=d.T.string)]),
        withTimeout(timeout): { spec+: { retry+: { perRetry+: { timeout: timeout } } } },
      },
      '#retryOn':: d.obj(help='"RetryOn specifies the retry trigger condition.\\n\\nIf not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503)."'),
      retryOn: {
        '#withHttpStatusCodes':: d.fn(help='"HttpStatusCodes specifies the http status codes to be retried.\\nThe retriable-status-codes trigger must also be configured for these status codes to trigger a retry."', args=[d.arg(name='httpStatusCodes', type=d.T.array)]),
        withHttpStatusCodes(httpStatusCodes): { spec+: { retry+: { retryOn+: { httpStatusCodes: if std.isArray(v=httpStatusCodes) then httpStatusCodes else [httpStatusCodes] } } } },
        '#withHttpStatusCodesMixin':: d.fn(help='"HttpStatusCodes specifies the http status codes to be retried.\\nThe retriable-status-codes trigger must also be configured for these status codes to trigger a retry."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpStatusCodes', type=d.T.array)]),
        withHttpStatusCodesMixin(httpStatusCodes): { spec+: { retry+: { retryOn+: { httpStatusCodes+: if std.isArray(v=httpStatusCodes) then httpStatusCodes else [httpStatusCodes] } } } },
        '#withTriggers':: d.fn(help='"Triggers specifies the retry trigger condition(Http/Grpc)."', args=[d.arg(name='triggers', type=d.T.array)]),
        withTriggers(triggers): { spec+: { retry+: { retryOn+: { triggers: if std.isArray(v=triggers) then triggers else [triggers] } } } },
        '#withTriggersMixin':: d.fn(help='"Triggers specifies the retry trigger condition(Http/Grpc)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='triggers', type=d.T.array)]),
        withTriggersMixin(triggers): { spec+: { retry+: { retryOn+: { triggers+: if std.isArray(v=triggers) then triggers else [triggers] } } } },
      },
      '#withNumRetries':: d.fn(help='"NumRetries is the number of retries to be attempted. Defaults to 2."', args=[d.arg(name='numRetries', type=d.T.integer)]),
      withNumRetries(numRetries): { spec+: { retry+: { numRetries: numRetries } } },
    },
    '#targetRef':: d.obj(help='"TargetRef is the name of the resource this policy is being attached to.\\nThis policy and the TargetRef MUST be in the same namespace for this\\nPolicy to have effect\\n\\nDeprecated: use targetRefs/targetSelectors instead"'),
    targetRef: {
      '#withGroup':: d.fn(help='"Group is the group of the target resource."', args=[d.arg(name='group', type=d.T.string)]),
      withGroup(group): { spec+: { targetRef+: { group: group } } },
      '#withKind':: d.fn(help='"Kind is kind of the target resource."', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { targetRef+: { kind: kind } } },
      '#withName':: d.fn(help='"Name is the name of the target resource."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { targetRef+: { name: name } } },
      '#withSectionName':: d.fn(help="\"SectionName is the name of a section within the target resource. When\\nunspecified, this targetRef targets the entire resource. In the following\\nresources, SectionName is interpreted as the following:\\n\\n* Gateway: Listener name\\n* HTTPRoute: HTTPRouteRule name\\n* Service: Port name\\n\\nIf a SectionName is specified, but does not exist on the targeted object,\\nthe Policy must fail to attach, and the policy implementation should record\\na `ResolvedRefs` or similar Condition in the Policy's status.\"", args=[d.arg(name='sectionName', type=d.T.string)]),
      withSectionName(sectionName): { spec+: { targetRef+: { sectionName: sectionName } } },
    },
    '#targetRefs':: d.obj(help='"TargetRefs are the names of the Gateway resources this policy\\nis being attached to."'),
    targetRefs: {
      '#withGroup':: d.fn(help='"Group is the group of the target resource."', args=[d.arg(name='group', type=d.T.string)]),
      withGroup(group): { group: group },
      '#withKind':: d.fn(help='"Kind is kind of the target resource."', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { kind: kind },
      '#withName':: d.fn(help='"Name is the name of the target resource."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withSectionName':: d.fn(help="\"SectionName is the name of a section within the target resource. When\\nunspecified, this targetRef targets the entire resource. In the following\\nresources, SectionName is interpreted as the following:\\n\\n* Gateway: Listener name\\n* HTTPRoute: HTTPRouteRule name\\n* Service: Port name\\n\\nIf a SectionName is specified, but does not exist on the targeted object,\\nthe Policy must fail to attach, and the policy implementation should record\\na `ResolvedRefs` or similar Condition in the Policy's status.\"", args=[d.arg(name='sectionName', type=d.T.string)]),
      withSectionName(sectionName): { sectionName: sectionName },
    },
    '#targetSelectors':: d.obj(help='"TargetSelectors allow targeting resources for this policy based on labels"'),
    targetSelectors: {
      '#matchExpressions':: d.obj(help='"MatchExpressions is a list of label selector requirements. The requirements are ANDed."'),
      matchExpressions: {
        '#withKey':: d.fn(help='"key is the label key that the selector applies to."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help="\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"", args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withValues':: d.fn(help='"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch."', args=[d.arg(name='values', type=d.T.array)]),
        withValues(values): { values: if std.isArray(v=values) then values else [values] },
        '#withValuesMixin':: d.fn(help='"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
        withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
      },
      '#withGroup':: d.fn(help='"Group is the group that this selector targets. Defaults to gateway.networking.k8s.io"', args=[d.arg(name='group', type=d.T.string)]),
      withGroup(group): { group: group },
      '#withKind':: d.fn(help='"Kind is the resource kind that this selector targets."', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { kind: kind },
      '#withMatchExpressions':: d.fn(help='"MatchExpressions is a list of label selector requirements. The requirements are ANDed."', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
      '#withMatchExpressionsMixin':: d.fn(help='"MatchExpressions is a list of label selector requirements. The requirements are ANDed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
      withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
      '#withMatchLabels':: d.fn(help='"MatchLabels are the set of label selectors for identifying the targeted resource"', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabels(matchLabels): { matchLabels: matchLabels },
      '#withMatchLabelsMixin':: d.fn(help='"MatchLabels are the set of label selectors for identifying the targeted resource"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
      withMatchLabelsMixin(matchLabels): { matchLabels+: matchLabels },
    },
    '#tcpKeepalive':: d.obj(help='"TcpKeepalive settings associated with the upstream client connection.\\nDisabled by default."'),
    tcpKeepalive: {
      '#withIdleTime':: d.fn(help='"The duration a connection needs to be idle before keep-alive\\nprobes start being sent.\\nThe duration format is\\nDefaults to `7200s`."', args=[d.arg(name='idleTime', type=d.T.string)]),
      withIdleTime(idleTime): { spec+: { tcpKeepalive+: { idleTime: idleTime } } },
      '#withInterval':: d.fn(help='"The duration between keep-alive probes.\\nDefaults to `75s`."', args=[d.arg(name='interval', type=d.T.string)]),
      withInterval(interval): { spec+: { tcpKeepalive+: { interval: interval } } },
      '#withProbes':: d.fn(help='"The total number of unacknowledged probes to send before deciding\\nthe connection is dead.\\nDefaults to 9."', args=[d.arg(name='probes', type=d.T.integer)]),
      withProbes(probes): { spec+: { tcpKeepalive+: { probes: probes } } },
    },
    '#telemetry':: d.obj(help='"Telemetry configures the telemetry settings for the policy target (Gateway or xRoute).\\nThis will override the telemetry settings in the EnvoyProxy resource."'),
    telemetry: {
      '#tracing':: d.obj(help='"Tracing configures the tracing settings for the backend or HTTPRoute."'),
      tracing: {
        '#samplingFraction':: d.obj(help='"SamplingFraction represents the fraction of requests that should be\\nselected for tracing if no prior sampling decision has been made.\\n\\nThis will take precedence over sampling fraction on EnvoyProxy if set."'),
        samplingFraction: {
          '#withDenominator':: d.fn(help='', args=[d.arg(name='denominator', type=d.T.integer)]),
          withDenominator(denominator): { spec+: { telemetry+: { tracing+: { samplingFraction+: { denominator: denominator } } } } },
          '#withNumerator':: d.fn(help='', args=[d.arg(name='numerator', type=d.T.integer)]),
          withNumerator(numerator): { spec+: { telemetry+: { tracing+: { samplingFraction+: { numerator: numerator } } } } },
        },
        '#withCustomTags':: d.fn(help='"CustomTags defines the custom tags to add to each span.\\nIf provider is kubernetes, pod name and namespace are added by default."', args=[d.arg(name='customTags', type=d.T.object)]),
        withCustomTags(customTags): { spec+: { telemetry+: { tracing+: { customTags: customTags } } } },
        '#withCustomTagsMixin':: d.fn(help='"CustomTags defines the custom tags to add to each span.\\nIf provider is kubernetes, pod name and namespace are added by default."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='customTags', type=d.T.object)]),
        withCustomTagsMixin(customTags): { spec+: { telemetry+: { tracing+: { customTags+: customTags } } } },
      },
    },
    '#timeout':: d.obj(help='"Timeout settings for the backend connections."'),
    timeout: {
      '#http':: d.obj(help='"Timeout settings for HTTP."'),
      http: {
        '#withConnectionIdleTimeout':: d.fn(help='"The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.\\nDefault: 1 hour."', args=[d.arg(name='connectionIdleTimeout', type=d.T.string)]),
        withConnectionIdleTimeout(connectionIdleTimeout): { spec+: { timeout+: { http+: { connectionIdleTimeout: connectionIdleTimeout } } } },
        '#withMaxConnectionDuration':: d.fn(help='"The maximum duration of an HTTP connection.\\nDefault: unlimited."', args=[d.arg(name='maxConnectionDuration', type=d.T.string)]),
        withMaxConnectionDuration(maxConnectionDuration): { spec+: { timeout+: { http+: { maxConnectionDuration: maxConnectionDuration } } } },
        '#withRequestTimeout':: d.fn(help='"RequestTimeout is the time until which entire response is received from the upstream."', args=[d.arg(name='requestTimeout', type=d.T.string)]),
        withRequestTimeout(requestTimeout): { spec+: { timeout+: { http+: { requestTimeout: requestTimeout } } } },
      },
      '#tcp':: d.obj(help='"Timeout settings for TCP."'),
      tcp: {
        '#withConnectTimeout':: d.fn(help='"The timeout for network connection establishment, including TCP and TLS handshakes.\\nDefault: 10 seconds."', args=[d.arg(name='connectTimeout', type=d.T.string)]),
        withConnectTimeout(connectTimeout): { spec+: { timeout+: { tcp+: { connectTimeout: connectTimeout } } } },
      },
    },
    '#withCompression':: d.fn(help='"The compression config for the http streams."', args=[d.arg(name='compression', type=d.T.array)]),
    withCompression(compression): { spec+: { compression: if std.isArray(v=compression) then compression else [compression] } },
    '#withCompressionMixin':: d.fn(help='"The compression config for the http streams."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='compression', type=d.T.array)]),
    withCompressionMixin(compression): { spec+: { compression+: if std.isArray(v=compression) then compression else [compression] } },
    '#withHttpUpgrade':: d.fn(help='"HTTPUpgrade defines the configuration for HTTP protocol upgrades.\\nIf not specified, the default upgrade configuration(websocket) will be used."', args=[d.arg(name='httpUpgrade', type=d.T.array)]),
    withHttpUpgrade(httpUpgrade): { spec+: { httpUpgrade: if std.isArray(v=httpUpgrade) then httpUpgrade else [httpUpgrade] } },
    '#withHttpUpgradeMixin':: d.fn(help='"HTTPUpgrade defines the configuration for HTTP protocol upgrades.\\nIf not specified, the default upgrade configuration(websocket) will be used."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpUpgrade', type=d.T.array)]),
    withHttpUpgradeMixin(httpUpgrade): { spec+: { httpUpgrade+: if std.isArray(v=httpUpgrade) then httpUpgrade else [httpUpgrade] } },
    '#withMergeType':: d.fn(help='"MergeType determines how this configuration is merged with existing BackendTrafficPolicy\\nconfigurations targeting a parent resource. When set, this configuration will be merged\\ninto a parent BackendTrafficPolicy (i.e. the one targeting a Gateway or Listener).\\nThis field cannot be set when targeting a parent resource (Gateway).\\nIf unset, no merging occurs, and only the most specific configuration takes effect."', args=[d.arg(name='mergeType', type=d.T.string)]),
    withMergeType(mergeType): { spec+: { mergeType: mergeType } },
    '#withResponseOverride':: d.fn(help='"ResponseOverride defines the configuration to override specific responses with a custom one.\\nIf multiple configurations are specified, the first one to match wins."', args=[d.arg(name='responseOverride', type=d.T.array)]),
    withResponseOverride(responseOverride): { spec+: { responseOverride: if std.isArray(v=responseOverride) then responseOverride else [responseOverride] } },
    '#withResponseOverrideMixin':: d.fn(help='"ResponseOverride defines the configuration to override specific responses with a custom one.\\nIf multiple configurations are specified, the first one to match wins."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='responseOverride', type=d.T.array)]),
    withResponseOverrideMixin(responseOverride): { spec+: { responseOverride+: if std.isArray(v=responseOverride) then responseOverride else [responseOverride] } },
    '#withTargetRefs':: d.fn(help='"TargetRefs are the names of the Gateway resources this policy\\nis being attached to."', args=[d.arg(name='targetRefs', type=d.T.array)]),
    withTargetRefs(targetRefs): { spec+: { targetRefs: if std.isArray(v=targetRefs) then targetRefs else [targetRefs] } },
    '#withTargetRefsMixin':: d.fn(help='"TargetRefs are the names of the Gateway resources this policy\\nis being attached to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targetRefs', type=d.T.array)]),
    withTargetRefsMixin(targetRefs): { spec+: { targetRefs+: if std.isArray(v=targetRefs) then targetRefs else [targetRefs] } },
    '#withTargetSelectors':: d.fn(help='"TargetSelectors allow targeting resources for this policy based on labels"', args=[d.arg(name='targetSelectors', type=d.T.array)]),
    withTargetSelectors(targetSelectors): { spec+: { targetSelectors: if std.isArray(v=targetSelectors) then targetSelectors else [targetSelectors] } },
    '#withTargetSelectorsMixin':: d.fn(help='"TargetSelectors allow targeting resources for this policy based on labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targetSelectors', type=d.T.array)]),
    withTargetSelectorsMixin(targetSelectors): { spec+: { targetSelectors+: if std.isArray(v=targetSelectors) then targetSelectors else [targetSelectors] } },
    '#withUseClientProtocol':: d.fn(help='"UseClientProtocol configures Envoy to prefer sending requests to backends using\\nthe same HTTP protocol that the incoming request used. Defaults to false, which means\\nthat Envoy will use the protocol indicated by the attached BackendRef."', args=[d.arg(name='useClientProtocol', type=d.T.boolean)]),
    withUseClientProtocol(useClientProtocol): { spec+: { useClientProtocol: useClientProtocol } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
